import socket
import requests
import subprocess
from scapy.all import *

def list_interfaces():
    interfaces = []
    try:
        # On Unix-like systems
        result = subprocess.run(['ifconfig'], capture_output=True, text=True)
        interfaces = [line.split()[0] for line in result.stdout.split('\n') if line]
    except:
        try:
            # On Windows
            result = subprocess.run(['ipconfig'], capture_output=True, text=True)
            interfaces = [line.strip().split(':')[0] for line in result.stdout.split('\n') if 'adapter' in line]
        except Exception as e:
            print(f"Error listing interfaces: {e}")
    return interfaces

def port_scanner(target, ports):
    open_ports = []
    try:
        for port in ports:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.settimeout(1)
            if not s.connect_ex((target.strip(), port)):
                open_ports.append(port)
            s.close()
    except socket.gaierror:
        print(f"Error: Unable to resolve IP address or hostname for target '{target}'")
    except socket.timeout:
        print(f"Error: Connection to target '{target}' timed out")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
    return open_ports

def brute_force(url, username, password_list):
    for password in password_list:
        response = requests.post(url, data={"username": username, "password": password})
        if "Login successful" in response.text:
            return password
    return None

def packet_sniffer(interface, packet_count):
    packets = []

    def process_packet(packet):
        packets.append(packet)

    sniff(iface=interface, prn=process_packet, count=packet_count)
    
    print(f"\nCaptured {len(packets)} packets:")
    for i, packet in enumerate(packets):
        print(f"{i+1}: {packet.summary()}")

def vulnerability_scanner(url, payloads):
    found_vulnerabilities = []

    for payload in payloads:
        response = requests.get(url + payload)
        if "vulnerable" in response.text.lower():
            found_vulnerabilities.append(payload)

    if found_vulnerabilities:
        print(f"\nVulnerabilities found for {url}:")
        for vuln in found_vulnerabilities:
            print(f"- {vuln}")
    else:
        print(f"\nNo vulnerabilities found for {url}")

def main():
    while True:
        print("\nChoose a function to perform:")
        print("1. Port Scanner")
        print("2. Brute-Forcer")
        print("3. Network Sniffer")
        print("4. Vulnerability Scanner")
        print("5. List Network Interfaces")
        print("6. Exit")
        
        try:
            choice = input("Enter your choice: ")
        except EOFError:
            print("EOFError detected. Exiting...")
            break
        except Exception as e:
            print(f"Unexpected error: {e}")
            break

        if choice == '1':
            target = input("Enter target IP: ")
            port_list = list(range(1, 1025))  # Scanning common ports 1-1024
            open_ports = port_scanner(target, port_list)
            print(f"\nOpen Ports for {target}:")
            for port in open_ports:
                print(f"Port {port} is open")
        elif choice == '2':
            url = input("Enter login URL: ")
            username = input("Enter username: ")
            password_list = ['password1', 'password2']  # Example passwords
            password = brute_force(url, username, password_list)
            if password:
                print(f"Password found: {password}")
            else:
                print("Password not found")
        elif choice == '3':
            interface = input("Enter network interface: ")
            packet_count = int(input("Enter number of packets to capture: "))
            packet_sniffer(interface, packet_count)
        elif choice == '4':
            url = input("Enter URL: ")
            payloads = ['<script>alert(1)</script>', '<img src=x onerror=alert(1)>', '<iframe src="javascript:alert(1)">']  # Example payloads
            vulnerability_scanner(url, payloads)
        elif choice == '5':
            interfaces = list_interfaces()
            print("Available Network Interfaces:")
            for i, iface in enumerate(interfaces, 1):
                print(f"{i}. {iface}")
        elif choice == '6':
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
